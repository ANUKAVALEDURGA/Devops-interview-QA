PWC 1st round

1. what is ur roles and responsibilities
2. do you have experience with terraform n ansible
3. how to enable the state locking feature of terraform in aws
4. how it will work statelock file 
5. u have created infrastructure in aws console later ur organization is ask you to integrate those infrastructure in to terraforn structure
6.  when the state file will create very first time means after terraform in it or after terraform plan 
7. what will be in there in state file
8.  in ansible variable which can override others on highest priority
9. how do you encrypt sensitive data in ansible  
In Ansible, sensitive data such as passwords, API keys, and other credentials should be encrypted to protect them from unauthorized access. Ansible provides a feature called "Vault" that allows you to encrypt sensitive data.

Here are the steps to encrypt sensitive data in Ansible using Vault:

Create a vault file: Create a new file with a .vault extension to store your encrypted data. You can create this file using the ansible-vault create command, 
which will prompt you to enter and confirm a password. For example:
ansible-vault create mysecrets.vault
Edit the vault file: Open the vault file in your favorite text editor and add your sensitive data in plain text. For example:

my_password: supersecret
api_key: 12345
Encrypt the vault file: Encrypt the vault file using the ansible-vault encrypt command. For example:

ansible-vault encrypt mysecrets.vault
This will encrypt the contents of the file using the password you entered in step 1.

Use the vault file in your playbook: To use the encrypted data in your playbook, you need to specify the path to the vault file and the password to decrypt it. 
You can do this by adding the --ask-vault-pass option to the ansible-playbook command, which will prompt you to enter the vault password. For example:

ansible-playbook myplaybook.yml --ask-vault-pass
You can also specify the vault password in a file or environment variable using the --vault-password-file or --vault-password-env options, respectively.

Use the encrypted variables in your playbook: To use the encrypted variables in your playbook, you need to wrap them with the vault filter. For example:

- name: Set the password
  debug:
    msg: "The password is {{ my_password | vault }}"
This will decrypt the value of my_password and display it in the output.

By following these steps, you can encrypt sensitive data in Ansible using Vault to protect it from unauthorized access. It's important to keep the vault 
password secure and to limit access to the encrypted files to only those who need it.

10. why ansible is much popular with compare to other tools
ANS:  ansible is agentless, with other tools we need to install agent in all machine 
11. how ansible work . how install or tell me ansible configuration
12. how to do the passwordless connection configartion 
13. master slave configuration 
14. did you configure window slave 
15. have you heard about JNLP agent java network luanch protocal
16. i have a 10 slaves and my perticular pipeline job i want to run in 'a' slave machine how you will configure 
17. diffrence between git pull and git fetch
18. do you have used python 
18. any other progarmming u know
19. if i want to get the uniq shell type can you give me how you approch this 
20. can i get reverse of the string can you tell me the steps 
21. in docker file we have 10 cmd  command which cmd command will run first 
22. diffrent cmd and entrypoint
23. what is a multi stage build in docker
24. docker container it has a memory leack so it used entire host memory what will happen to my host (VM) (try u utilize 100%)
ANS: 1. in case of memory ur VM will get crashhed bcz vm needs to other system  process will wok 
          2. in case of cpu utilization it just slow down 
25. what is daemonset in k8s
26. what is diffrence between udp and tcp traffic 
UDP (User Datagram Protocol) and TCP (Transmission Control Protocol) are both protocols used for transmitting data over IP networks, but they have some 
significant differences in how they work.

The main differences between UDP and TCP are:

Connection-oriented vs connectionless: TCP is connection-oriented, which means it establishes a connection between the sender and the receiver before transmitting 
any data. UDP is connectionless, which means it does not establish a connection before transmitting data.

Reliability: TCP is a reliable protocol, which means it guarantees that all data transmitted will be received by the receiver. If any data packets are lost 
or corrupted during transmission, TCP will retransmit them until they are successfully received. UDP, on the other hand, is an unreliable protocol, which means it 
does not guarantee that all data packets will be received by the receiver. If any data packets are lost or corrupted during transmission, UDP will not retransmit them.

Packet overhead: TCP has more overhead than UDP. It adds additional data to each packet to ensure reliability, such as sequence numbers and acknowledgment 
messages. UDP has less overhead because it does not need to establish a connection or guarantee reliability.

Speed: UDP is faster than TCP because it has less overhead and does not require a connection setup. However, this speed comes at the cost of reliability, since 
UDP does not guarantee that all data packets will be received.

In summary, TCP is a reliable, connection-oriented protocol that guarantees all data packets will be received, but has more overhead and can be slower than UDP. 
UDP is a fast, connectionless protocol that has less overhead but does not guarantee that all data packets will be received. The choice between UDP and TCP depends 
on the specific use case and requirements of the application or service being used.

27. aws services u have used
28. what is differnce bteween layer 4 and layer 7 in LB 
Layer 4 load balancing and Layer 7 load balancing are two different approaches to distributing traffic across multiple servers in a load balancer (LB).

Layer 4 load balancing works at the transport layer (Layer 4) of the OSI model, which means it routes traffic based on the IP address and port number of the 
incoming request. It does not take into account the content of the request or the application layer protocol being used. Layer 4 LBs are typically used for simple 
TCP or UDP-based applications, such as HTTP, SMTP, or FTP.

In contrast, Layer 7 load balancing works at the application layer (Layer 7) of the OSI model, which means it can inspect the contents of the request and route 
traffic based on specific application layer protocols, such as HTTP, HTTPS, or SMTP. This allows for more intelligent routing decisions based on factors such as 
URL path, cookies, and HTTP headers. Layer 7 LBs are typically used for more complex applications that require application layer inspection and routing, such as 
web applications, e-commerce sites, and APIs.

Some of the key differences between Layer 4 and Layer 7 load balancing are:

Traffic routing: Layer 4 load balancing routes traffic based on IP address and port number, while Layer 7 load balancing can route traffic based on 
specific application layer protocols and content.

Intelligence: Layer 7 load balancing has more intelligence and can make routing decisions based on more factors than Layer 4 load balancing.

Application support: Layer 7 load balancing supports a wider range of applications than Layer 4 load balancing, including web applications, APIs, and e-commerce sites.

Performance: Layer 4 load balancing is typically faster and has lower latency than Layer 7 load balancing because it requires less processing and inspection of the
traffic.

In summary, Layer 4 load balancing is a simpler and faster approach that is suitable for simple TCP or UDP-based applications, while Layer 7 load balancing is a 
more intelligent and flexible approach that is suitable for more complex applications that require application layer inspection and routing. The choice between Layer 
4 and Layer 7 load balancing depends on the specific requirements of the application or service being used.

29. i have a 3 tier application i need to deploy on aws can you give me list of services ur going to use considering high availibility and scalability and end to 
end security
A 3-tier application is a type of application architecture that separates the application's components into three distinct layers, each with its own functionality 
and responsibilities. The three layers are typically referred to as the presentation layer, application layer, and data layer.

The presentation layer, also known as the user interface (UI) layer, is responsible for displaying the application's user interface to the end-user. This 
layer typically consists of the user interface components, such as web pages, mobile apps, or desktop applications.

The application layer, also known as the business logic layer, is responsible for processing and managing the business logic of the application. This layer 
contains the application's logic and performs tasks such as data validation, business rules enforcement, and process management.

The data layer, also known as the persistence layer, is responsible for managing the application's data storage and retrieval. This layer contains the database, 
file storage, or any other data storage mechanism used by the application.

By separating the application into these three layers, each layer can be developed, managed, and scaled independently of the other layers, allowing for 
easier maintenance, scalability, and flexibility.

30. how do you diffrentiate between public subnet and private subnet
Internet access: A public subnet is directly connected to the internet, which means instances in the public subnet can have public IP addresses and can be accessed
from the internet. In contrast, a private subnet is not directly connected to the internet, which means instances in the private subnet cannot have public IP 
addresses and cannot be accessed directly from the internet.

Route table: A public subnet typically has a route table that includes a route to an internet gateway, which allows instances in the public subnet to access 
the internet. In contrast, a private subnet typically has a route table that does not include a route to the internet gateway, which prevents instances in the 
private subnet from accessing the internet.

Security: A public subnet is more vulnerable to security threats than a private subnet because its instances are accessible from the internet. To mitigate 
these security risks, you can configure security groups and network ACLs to control access to instances in the public subnet. In contrast, a private subnet is 
more secure because its instances are not directly accessible from the internet.
If a private subnet needs access to the internet, you can set up a NAT Gateway or a NAT instance in your public subnet, and then update the route table of your 
private subnet to route traffic to the NAT Gateway or NAT instance.
31. assume have 100 vpc and and how they communicate how u make the connectivity
Ans: with transit gate we can make it 

32. in vpc peering can we use VPN in between them
ans: no VPN connection is required. for VPC peering
a VPN (Virtual Private Network) connection is not required for VPC peering in AWS. VPC peering enables you to connect two VPCs together using a direct 
network connection, without the need for a VPN connection or internet gateway.

With VPC peering, you can route traffic between VPCs privately and securely, as if they were part of the same network. VPC peering is a convenient way to 
enable communication between VPCs in the same or different regions, as long as the VPC CIDR blocks do not overlap.

That being said, if you have additional security or compliance requirements, you might consider using VPN connections in addition to VPC peering to encrypt 
traffic between VPCs and on-premises networks or to add an extra layer of security. Ultimately, the choice of connectivity method depends on your specific use 
case, network topology, and security requirements.






